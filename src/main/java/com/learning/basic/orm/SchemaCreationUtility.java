package com.learning.basic.orm;

import com.learning.basic.orm.annotation.Column;
import com.learning.basic.orm.annotation.Entity;
import com.learning.basic.orm.annotation.PrimaryKey;
import com.learning.basic.orm.annotation.Table;
import org.reflections.Reflections;

import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

public final class SchemaCreationUtility {

    private static final String TABLE_CREATE_QUERY_TEMPLATE = "create table if not exists %s(\n%s\n);";

    private static final Map<Class<?>, String> postgresBasicDbTypesMapping = new HashMap<>();

    private static final Map<Class<?>, String> postgresAutoGeneratedDbTypesMapping = new HashMap<>();

    static {
        postgresBasicDbTypesMapping.put(Long.class, "bigint");
        postgresBasicDbTypesMapping.put(Integer.class, "integer");
        postgresBasicDbTypesMapping.put(long.class, "bigint");
        postgresBasicDbTypesMapping.put(int.class, "integer");
        postgresBasicDbTypesMapping.put(String.class, "varchar");
        postgresBasicDbTypesMapping.put(BigDecimal.class, "decimal");

        postgresAutoGeneratedDbTypesMapping.put(Long.class, "bigserial");
        postgresAutoGeneratedDbTypesMapping.put(Integer.class, "serial");
        postgresAutoGeneratedDbTypesMapping.put(long.class, "bigserial");
        postgresAutoGeneratedDbTypesMapping.put(int.class, "serial");
    }

    public static void initSchema(String basePackage, Hibernate<?, ? extends Number> dbManager) {
        Objects.requireNonNull(basePackage);
        Reflections reflections = new Reflections(basePackage);

        String initScript = reflections
                .getTypesAnnotatedWith(Entity.class)
                .stream()
                .map(SchemaCreationUtility::getCreateTableScript)
                .collect(Collectors.joining("\n"));

        dbManager.executeQuery(initScript);
    }

    private static String getCreateTableScript(Class<?> clazz) {
        var tableName = "";
        if (clazz.isAnnotationPresent(Table.class)) {
            tableName = clazz.getAnnotation(Table.class).value();
        } else {
            tableName = clazz.getTypeName();
        }

        var columns = Arrays.stream(clazz.getDeclaredFields())
                .map(SchemaCreationUtility::makeFieldAccessible)
                .map(SchemaCreationUtility::getColumnCreationStatement)
                .collect(Collectors.joining(",\n"));

        return String.format(TABLE_CREATE_QUERY_TEMPLATE, tableName, columns);
    }

    private static Field makeFieldAccessible(Field field) {
        field.setAccessible(Boolean.TRUE);
        return field;
    }

    private static String getColumnCreationStatement(Field field) {
        var statement = "";
        if (field.isAnnotationPresent(Column.class)) {
            statement += field.getAnnotation(Column.class).value();
        } else {
            statement += field.getName();
        }

        if (field.isAnnotationPresent(PrimaryKey.class)) {
            statement += " " + postgresAutoGeneratedDbTypesMapping.get(field.getType()) + " primary key";
        } else {
            statement += " " + postgresBasicDbTypesMapping.get(field.getType());
        }

        return statement;
    }

}
